{"version":3,"sources":["api/client.js","api/scenicSpot.js","components/ScenicSpot/ScenicSpotListItem.js","components/ScenicSpot/LoadingStatus.js","helpers/function.js","components/ScenicSpot/ScenicSpot.js","store/actions/scenicSpotActions.js","components/NotFound.js","components/Welcome.js","components/Navbar/SearchInput.js","components/Navbar/CitiesSelect.js","components/Navbar/Navbar.js","App.js","store/reducers/rootReducer.js","index.js"],"names":["client","axios","create","baseURL","params","format","interceptors","request","use","config","headers","GMTString","Date","toGMTString","ShaObj","jsSHA","setHMACKey","update","HMAC","getHMAC","Authorization","getAuthorizationHeader","synchronous","getScenicSpot","skip","a","numOfScenicSpot","city","get","$skip","$top","res","data","ScenicSpotListItem","spot","className","Name","Class1","Class2","Class3","Description","DescriptionDetail","href","Address","target","rel","Phone","ID","LoadingStatus","loadingStatus","isLoading","loadingError","debounce","func","timer","timeout","args","clearTimeout","setTimeout","apply","cityList","undefined","ScenicSpot","props","checkScrollPosition","e","hasMoreDataToFetch","searchTerm","offsetHeight","scrollTop","scrollHeight","state","isFetching","setState","fetchData","spots","length","numOfScenicSpotToFetch","scenicSpots","saveScenicSpot","updateCityInfo","spotListRef","React","createRef","this","prevProps","oldCity","newCity","current","includes","to","ScenicSpotList","filter","match","map","showLoadingStatus","onScroll","ref","Component","connect","ownProps","dispatch","newData","type","NotFound","location","useLocation","pathname","Welcome","SearchInput","setSearchTerm","placeholder","value","onChange","trim","onClick","cities","name","CitiesSelect","selectedCity","handleSelectCity","history","push","matchPath","window","path","process","cityOptions","disabled","id","withRouter","Navbar","App","useState","exact","component","render","initState","Taiwan","Taipei","NewTaipei","Taoyuan","Taichung","Tainan","Kaohsiung","Keelung","Hsinchu","HsinchuCounty","MiaoliCounty","ChanghuaCounty","NantouCounty","YunlinCounty","ChiayiCounty","Chiayi","PingtungCounty","YilanCounty","HualienCounty","TaitungCounty","KinmenCounty","PenghuCounty","LienchiangCounty","rootReducer","action","newSpots","newHasMoreDataToFetch","store","createStore","ReactDOM","StrictMode","basename","document","getElementById"],"mappings":"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","file":"static/js/main.9a733c02.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport jsSHA from 'jssha'\r\n\r\nconst getAuthorizationHeader = () => {\r\n  const AppID = '6719c6e7e3564c948c45a978bc4a9fc2'\r\n  const AppKey = 'tOl73VQNaCJmrbt_FvSSQnBM7JM'\r\n\r\n  const GMTString = new Date().toGMTString()\r\n  const ShaObj = new jsSHA('SHA-1', 'TEXT')\r\n  ShaObj.setHMACKey(AppKey, 'TEXT')\r\n  ShaObj.update('x-date: ' + GMTString)\r\n  const HMAC = ShaObj.getHMAC('B64')\r\n  const Authorization = `hmac username=\"${AppID}\", algorithm=\"hmac-sha1\", headers=\"x-date\", signature=\"${HMAC}\"`\r\n\r\n  return { Authorization: Authorization, 'X-Date': GMTString }\r\n}\r\n\r\nconst client = axios.create({\r\n  baseURL: 'https://ptx.transportdata.tw/MOTC/v2',\r\n  params: {\r\n    format: 'JSON',\r\n  },\r\n})\r\n\r\nclient.interceptors.request.use(\r\n  function (config) {\r\n    config.headers = { ...config.headers, ...getAuthorizationHeader() }\r\n    return config\r\n  },\r\n  null,\r\n  { synchronous: true }\r\n)\r\n\r\nexport default client\r\n","import client from './client'\r\n\r\nexport const getScenicSpot = async (skip, numOfScenicSpot = 30, city = '') => {\r\n  const res = await client.get(`/Tourism/ScenicSpot/${city}`, {\r\n    params: {\r\n      $skip: skip,\r\n      $top: numOfScenicSpot,\r\n    },\r\n  })\r\n  return res.data\r\n}\r\n","import React from 'react'\r\n\r\nfunction ScenicSpotListItem({ spot }) {\r\n  return (\r\n    <li key={spot.ID} className=\"scenic-spot-list-item list-group-item\">\r\n      <h2 className=\"fw-bold\">{spot.Name}</h2>\r\n      <div className=\"mb-2\">\r\n        {spot.Class1 && <div className=\"tag\">{spot.Class1}</div>}\r\n        {spot.Class2 && <div className=\"tag\">{spot.Class2}</div>}\r\n        {spot.Class3 && <div className=\"tag\">{spot.Class3}</div>}\r\n      </div>\r\n      <p className=\"text-dark my-3\">{spot.Description || spot.DescriptionDetail}</p>\r\n      <div>\r\n        <p className=\"m-0 text-muted\">\r\n          地址：\r\n          <a\r\n            href={`https://www.google.com.tw/maps/search/${spot.Address}`}\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n          >\r\n            {spot.Address}\r\n          </a>\r\n        </p>\r\n        <p className=\"m-0 text-muted\">電話：{spot.Phone}</p>\r\n      </div>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default ScenicSpotListItem\r\n","import React from 'react'\r\n\r\nfunction LoadingStatus({ isLoading, loadingError }) {\r\n  let loadingStatus\r\n  if (loadingError) {\r\n    loadingStatus = loadingError\r\n  } else {\r\n    loadingStatus = isLoading ? '載入中' : '下滑至底載入更多資料'\r\n  }\r\n\r\n  return <li className=\"list-group-item text-center\">{loadingStatus}</li>\r\n}\r\n\r\nexport default LoadingStatus\r\n","export function debounce(func, timeout = 300) {\r\n  let timer\r\n  return (...args) => {\r\n    clearTimeout(timer)\r\n    timer = setTimeout(() => {\r\n      func.apply(this, args)\r\n    }, timeout)\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { getScenicSpot } from '../../api/scenicSpot'\r\nimport ScenicSpotListItem from './ScenicSpotListItem'\r\nimport LoadingStatus from './LoadingStatus'\r\nimport { saveScenicSpot, updateCityInfo } from '../../store/actions/scenicSpotActions'\r\nimport { debounce } from '../../helpers/function'\r\n\r\nconst NUM_OF_FIRST_LOAD = 30\r\nconst NUM_OF_SCROLL_LOAD = 30\r\nconst cityList = [\r\n  undefined, // 全台\r\n  'Taipei',\r\n  'NewTaipei',\r\n  'Taoyuan',\r\n  'Taichung',\r\n  'Tainan',\r\n  'Kaohsiung',\r\n  'Keelung',\r\n  'Hsinchu',\r\n  'HsinchuCounty',\r\n  'MiaoliCounty',\r\n  'ChanghuaCounty',\r\n  'NantouCounty',\r\n  'YunlinCounty',\r\n  'ChiayiCounty',\r\n  'Chiayi',\r\n  'PingtungCounty',\r\n  'YilanCounty',\r\n  'HualienCounty',\r\n  'TaitungCounty',\r\n  'KinmenCounty',\r\n  'PenghuCounty',\r\n  'LienchiangCounty',\r\n]\r\n\r\nclass ScenicSpot extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      isFetching: false,\r\n      loadingError: null,\r\n    }\r\n    this.spotListRef = React.createRef()\r\n  }\r\n\r\n  // 滾動時檢查是否到達最底，是則載入新資料\r\n  checkScrollPosition = async (e) => {\r\n    // 若 已經沒有新資料可抓取 或 正在搜尋，則不需檢查了\r\n    if (!this.props.hasMoreDataToFetch || this.props.searchTerm) return\r\n\r\n    const { offsetHeight, scrollTop, scrollHeight } = e.target\r\n    if (scrollTop !== 0 && offsetHeight + scrollTop === scrollHeight && !this.state.isFetching) {\r\n      this.setState({ isFetching: true, loadingError: null })\r\n      try {\r\n        await this.fetchData()\r\n      } catch (error) {\r\n        this.setState({ loadingError: '出現錯誤，請重新嘗試' })\r\n      }\r\n      this.setState({ isFetching: false })\r\n    }\r\n  }\r\n\r\n  fetchData = async () => {\r\n    // 先檢查是否還有資料可以抓取\r\n    if (!this.props.hasMoreDataToFetch) return\r\n\r\n    // 檢查是首次抓取還是已經抓過資料，調整抓取的數量\r\n    const numOfScenicSpotToFetch = this.props.spots.length ? NUM_OF_SCROLL_LOAD : NUM_OF_FIRST_LOAD\r\n\r\n    const scenicSpots = await getScenicSpot(\r\n      this.props.spots.length,\r\n      numOfScenicSpotToFetch,\r\n      this.props.city\r\n    )\r\n    this.props.saveScenicSpot(this.props.city, scenicSpots)\r\n\r\n    // 若抓到的資料比想要的資料少，代表沒有更多資料可以抓了\r\n    if (scenicSpots.length < NUM_OF_SCROLL_LOAD) {\r\n      this.props.updateCityInfo(this.props.city, false)\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    this.fetchData()\r\n  }\r\n\r\n  // 檢查是否換了不同的地區\r\n  async componentDidUpdate(prevProps) {\r\n    const oldCity = prevProps.city\r\n    const newCity = this.props.city\r\n\r\n    if (oldCity !== newCity) {\r\n      this.spotListRef.current.scrollTop = 0\r\n      // 有資料就先不要再抓了，滑到底再來抓\r\n      if (this.props.spots.length === 0) {\r\n        this.fetchData()\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // 確認城市名稱是正確的\r\n    if (!cityList.includes(this.props.city)) {\r\n      return <Redirect to=\"/scenicSpot\" />\r\n    }\r\n\r\n    const ScenicSpotList = this.props.spots\r\n      .filter((spot) => {\r\n        return spot.Name.match(this.props.searchTerm)\r\n      })\r\n      .map((spot) => {\r\n        return <ScenicSpotListItem key={spot.ID} spot={spot} />\r\n      })\r\n\r\n    const isLoading = this.state.isFetching || this.props.spots.length === 0\r\n    // 當有更多資料要抓取，且沒有在搜尋時才顯示loading status\r\n    const showLoadingStatus = this.props.hasMoreDataToFetch && !this.props.searchTerm\r\n    return (\r\n      <div className=\"scenicSpot container overflow-auto\">\r\n        <ul\r\n          className=\"list-group overflow-auto h-100 py-3\"\r\n          onScroll={debounce(this.checkScrollPosition)}\r\n          ref={this.spotListRef}\r\n        >\r\n          {ScenicSpotList}\r\n          {showLoadingStatus && (\r\n            <LoadingStatus isLoading={isLoading} loadingError={this.state.loadingError} />\r\n          )}\r\n        </ul>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  const city = ownProps.match.params.city\r\n  const hasMoreDataToFetch =\r\n    city !== undefined ? state.hasMoreDataToFetch[city] : state.hasMoreDataToFetch['Taiwan']\r\n  return {\r\n    spots: state.spots[city] || state.spots['Taiwan'],\r\n    hasMoreDataToFetch,\r\n    city,\r\n    searchTerm: ownProps.searchTerm,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    saveScenicSpot: (city, newData) => {\r\n      dispatch(saveScenicSpot(city, newData))\r\n    },\r\n    updateCityInfo: (city, hasMoreDataToFetch) => {\r\n      dispatch(updateCityInfo(city, hasMoreDataToFetch))\r\n    },\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ScenicSpot)\r\n","export const saveScenicSpot = (city = 'Taiwan', newData = []) => {\r\n  return {\r\n    type: 'SAVE_SCENIC_SPOT',\r\n    city,\r\n    newData,\r\n  }\r\n}\r\n\r\nexport const updateCityInfo = (city = 'Taiwan', hasMoreDataToFetch) => {\r\n  return {\r\n    type: 'UPDATE_CITY_INFO',\r\n    city,\r\n    hasMoreDataToFetch,\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { useLocation } from 'react-router-dom'\r\n\r\nfunction NotFound() {\r\n  const location = useLocation()\r\n\r\n  return (\r\n    <div>\r\n      <h3>\r\n        Oops! 找不到 <code>{location.pathname}</code>\r\n      </h3>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NotFound\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nfunction Welcome() {\r\n  return (\r\n    <div className=\"welcome h-100 d-flex flex-column justify-content-center text-center\">\r\n      <div>\r\n        <h1 className=\"mb-5\">歡迎光臨｡:.ﾟヽ(*´∀`)ﾉﾟ.:｡</h1>\r\n        <Link to=\"/scenicSpot\" className=\"btn btn-lg btn-info\">\r\n          開始瀏覽景點\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Welcome\r\n","import React from 'react'\r\n\r\nfunction SearchInput({ searchTerm, setSearchTerm }) {\r\n  const handleInputChange = (e) => {\r\n    setSearchTerm(e.target.value.trim())\r\n  }\r\n\r\n  const handleInputReset = () => {\r\n    setSearchTerm('')\r\n  }\r\n\r\n  return (\r\n    <div className=\"input-group\">\r\n      <input\r\n        type=\"text\"\r\n        className=\"form-control\"\r\n        placeholder=\"篩選景點名稱\"\r\n        value={searchTerm}\r\n        onChange={handleInputChange}\r\n      />\r\n      <button className=\"btn btn-secondary\" onClick={handleInputReset}>\r\n        清除\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SearchInput\r\n","import React, { Component } from 'react'\r\nimport { withRouter, matchPath } from 'react-router-dom'\r\n\r\nconst cities = [\r\n  { value: 'default', name: '請選擇範圍' },\r\n  { value: '', name: '全台景點 Taiwan' },\r\n  { value: 'Taipei', name: '臺北市 Taipei' },\r\n  { value: 'NewTaipei', name: '新北市 NewTaipei' },\r\n  { value: 'Taoyuan', name: '桃園市 Taoyuan' },\r\n  { value: 'Taichung', name: '臺中市 Taichung' },\r\n  { value: 'Tainan', name: '臺南市 Tainan' },\r\n  { value: 'Kaohsiung', name: '高雄市 Kaohsiung' },\r\n  { value: 'Keelung', name: '基隆市 Keelung' },\r\n  { value: 'Hsinchu', name: '新竹市 Hsinchu' },\r\n  { value: 'HsinchuCounty', name: '新竹縣 HsinchuCounty' },\r\n  { value: 'MiaoliCounty', name: '苗栗縣 MiaoliCounty' },\r\n  { value: 'ChanghuaCounty', name: '彰化縣 ChanghuaCounty' },\r\n  { value: 'NantouCounty', name: '南投縣 NantouCounty' },\r\n  { value: 'YunlinCounty', name: '雲林縣 YunlinCounty' },\r\n  { value: 'ChiayiCounty', name: '嘉義縣 ChiayiCounty' },\r\n  { value: 'Chiayi', name: '嘉義市 Chiayi' },\r\n  { value: 'PingtungCounty', name: '屏東縣 PingtungCounty' },\r\n  { value: 'YilanCounty', name: '宜蘭縣 YilanCounty' },\r\n  { value: 'HualienCounty', name: '花蓮縣 HualienCounty' },\r\n  { value: 'TaitungCounty', name: '臺東縣 TaitungCounty' },\r\n  { value: 'KinmenCounty', name: '金門縣 KinmenCounty' },\r\n  { value: 'PenghuCounty', name: '澎湖縣 PenghuCounty' },\r\n  { value: 'LienchiangCounty', name: '連江縣 LienchiangCounty' },\r\n]\r\n\r\nclass CitiesSelect extends Component {\r\n  state = {\r\n    selectedCity: '',\r\n  }\r\n\r\n  // 選擇特定城市\r\n  handleSelectCity = (e) => {\r\n    this.setState({ selectedCity: e.target.value })\r\n    this.props.history.push(`/scenicSpot/${e.target.value}`)\r\n  }\r\n\r\n  // 首次進入時，依照url更新選項\r\n  componentDidMount() {\r\n    const match = matchPath(window.location.pathname, {\r\n      path: `${process.env.PUBLIC_URL}/scenicSpot/:city?`,\r\n    })\r\n    if (match) {\r\n      this.setState({ selectedCity: match.params.city })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const cityOptions = cities.map((city) => {\r\n      return (\r\n        <option\r\n          value={city.value}\r\n          key={city.value}\r\n          disabled={city.value === 'default' ? true : null}\r\n        >\r\n          {city.name}\r\n        </option>\r\n      )\r\n    })\r\n\r\n    return (\r\n      <select\r\n        className=\"form-select\"\r\n        id=\"citySelect\"\r\n        onChange={this.handleSelectCity}\r\n        value={this.state.selectedCity}\r\n      >\r\n        {cityOptions}\r\n      </select>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withRouter(CitiesSelect)\r\n","import React from 'react'\r\nimport SearchInput from './SearchInput'\r\nimport CitiesSelect from './CitiesSelect'\r\n\r\nfunction Navbar(props) {\r\n  return (\r\n    <nav className=\"navbar navbar-light bg-light\">\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col\">\r\n            <CitiesSelect />\r\n          </div>\r\n          <div className=\"col\">\r\n            <SearchInput searchTerm={props.searchTerm} setSearchTerm={props.setSearchTerm} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Navbar\r\n","import { useState } from 'react'\r\nimport { Switch, Route } from 'react-router-dom'\r\nimport ScenicSpot from './components/ScenicSpot/ScenicSpot'\r\nimport NotFound from './components/NotFound'\r\nimport Welcome from './components/Welcome'\r\nimport Navbar from './components/Navbar/Navbar'\r\n\r\nfunction App() {\r\n  const [searchTerm, setSearchTerm] = useState('')\r\n\r\n  return (\r\n    <div className=\"app vh-100 d-flex flex-column\">\r\n      <Navbar searchTerm={searchTerm} setSearchTerm={setSearchTerm} />\r\n      <div className=\"d-flex flex-column overflow-auto h-100\">\r\n        <Switch>\r\n          <Route path=\"/\" exact component={Welcome} />\r\n          <Route\r\n            path=\"/scenicSpot/:city?\"\r\n            render={(props) => <ScenicSpot {...props} searchTerm={searchTerm} />}\r\n          />\r\n          <Route path=\"*\" component={NotFound} />\r\n        </Switch>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","const initState = {\r\n  spots: {\r\n    Taiwan: [],\r\n    Taipei: [],\r\n    NewTaipei: [],\r\n    Taoyuan: [],\r\n    Taichung: [],\r\n    Tainan: [],\r\n    Kaohsiung: [],\r\n    Keelung: [],\r\n    Hsinchu: [],\r\n    HsinchuCounty: [],\r\n    MiaoliCounty: [],\r\n    ChanghuaCounty: [],\r\n    NantouCounty: [],\r\n    YunlinCounty: [],\r\n    ChiayiCounty: [],\r\n    Chiayi: [],\r\n    PingtungCounty: [],\r\n    YilanCounty: [],\r\n    HualienCounty: [],\r\n    TaitungCounty: [],\r\n    KinmenCounty: [],\r\n    PenghuCounty: [],\r\n    LienchiangCounty: [],\r\n  },\r\n  isFetching: false,\r\n  hasMoreDataToFetch: {\r\n    Taiwan: true,\r\n    Taipei: true,\r\n    NewTaipei: true,\r\n    Taoyuan: true,\r\n    Taichung: true,\r\n    Tainan: true,\r\n    Kaohsiung: true,\r\n    Keelung: true,\r\n    Hsinchu: true,\r\n    HsinchuCounty: true,\r\n    MiaoliCounty: true,\r\n    ChanghuaCounty: true,\r\n    NantouCounty: true,\r\n    YunlinCounty: true,\r\n    ChiayiCounty: true,\r\n    Chiayi: true,\r\n    PingtungCounty: true,\r\n    YilanCounty: true,\r\n    HualienCounty: true,\r\n    TaitungCounty: true,\r\n    KinmenCounty: true,\r\n    PenghuCounty: true,\r\n    LienchiangCounty: true,\r\n  },\r\n}\r\n\r\nconst rootReducer = (state = initState, action) => {\r\n  switch (action.type) {\r\n    // 把各個城市的景點存起來\r\n    case 'SAVE_SCENIC_SPOT': {\r\n      const { city, newData } = action\r\n\r\n      const newSpots = {\r\n        ...state.spots,\r\n        [city]: [...state.spots[city], ...newData],\r\n      }\r\n      return {\r\n        ...state,\r\n        spots: newSpots,\r\n      }\r\n    }\r\n\r\n    // 更新城市是否還有更多資料可以抓取\r\n    case 'UPDATE_CITY_INFO': {\r\n      const { city, hasMoreDataToFetch } = action\r\n\r\n      const newHasMoreDataToFetch = {\r\n        ...state.hasMoreDataToFetch,\r\n        [city]: hasMoreDataToFetch,\r\n      }\r\n      return {\r\n        ...state,\r\n        hasMoreDataToFetch: newHasMoreDataToFetch,\r\n      }\r\n    }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default rootReducer\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { BrowserRouter as Router } from 'react-router-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport { createStore } from 'redux'\r\nimport { Provider } from 'react-redux'\r\nimport rootReducer from './store/reducers/rootReducer'\r\n\r\nconst store = createStore(rootReducer)\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <Router basename={process.env.PUBLIC_URL}>\r\n        <App />\r\n      </Router>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}